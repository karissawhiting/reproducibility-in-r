
# What Goes In Your Report? {background-color="#007CBA" style="text-align: center;"}


## gtsummary {auto-animate="true"}


- [**{gtsummary}**]{.emphasized} - Tools to create publication-ready analytical and summary tables using the R programming language. 

- Summarizes data sets, regression models, and more, using sensible defaults with highly customizable capabilities.


<p align="center"><img src="images/rerer_gtsummary.png"width=50%></p>




## {gtsummary} overview

::: columns
::: {.column width="60%"}
-   Create [**tabular summaries**]{.emphasized} including:
    -   "Table 1"
    -   Cross-tabulation
    -   Regression models summaries
    -   Survival data summaries
-   Report statistics from {gtsummary} tables [inline]{.emphasized} in R Markdown
-   [Stack or merge]{.emphasized} any table type
-   Use [themes]{.emphasized} to standardize across tables
-   Choose from different [print engines]{.emphasized}
:::

::: {.column width="40%"}
<img src="images/gtsummary_logo.png" width="80%"/>
:::
:::

## Basic tbl_summary()

::: columns
::: {.column width="50%"}

```{r}
#| echo: true

sm_trial <- trial %>% 
  select(trt, age, grade, response)

sm_trial %>%
  select(-trt) %>%
  tbl_summary()
```
:::

::: {.column width="50%"}
-   Four types of summaries: `continuous`, `continuous2`, `categorical`, and `dichotomous`

-   Variables coded `0/1`, `TRUE/FALSE`, `Yes/No` treated as dichotomous

-   Statistics are `median (IQR)` for continuous, `n (%)` for categorical/dichotomous

-   Lists `NA` values under "Unknown"

-   Label attributes are printed automatically
:::
:::

## Survival outcomes with tbl_survfit()

```{r}
#| echo: true

library(survival)
fit <- survfit(Surv(ttdeath, death) ~ trt, trial)
tbl_survfit(
  fit, 
  times = c(12, 24),
  label_header = "**{time} Month**"
) %>%
  add_p()
```

- Also, regression (and more) models with `tbl_regression()` and `tbl_uvregression()` 

## {gtsummary} + formulas

<p align="center">

<img src="https://raw.githubusercontent.com/ddsjoberg/gtsummary-weill-cornell-presentation/5887c81b58f4ed0c76f6ae458243e9c2a2fbbcd2/Images/Dan-SummaryTables-5.png" width="95%"/>

</p>

## Customize Using Add-on Functions

Summary tables can be further updated using [helper functions]{.emphasized}:

::: incremental
-   [add\_\*()]{.emphasized} add additional column of statistics or information, e.g. p-values, q-values, overall statistics, treatment differences, N obs., and more

-   [modify\_\*()]{.emphasized} modify table headers, spanning headers, footnotes, and more

-   [bold\_*()/italicize\_*()]{.emphasized} style labels, variable levels, significant p-values
:::

## Advanced Tips: Update tbl_summary() with modify\_\*()

```{r}
#| output-location: "column"
#| echo: true
sm_trial %>% 
  tbl_summary(
    by = trt, missing = "no"
  ) %>%
  modify_header(
      stat_1 ~ "**Group A**",
      stat_2 ~ "**Group B**"
  ) %>% 
  modify_spanning_header(
    all_stat_cols() ~ "**Drug**") %>% 
  modify_footnote(
    all_stat_cols() ~ 
      paste("median (IQR) for continuous;",
            "n (%) for categorical")
  )
```

-   Use `show_header_names()` to see the internal header names available for use in `modify_header()`

## Advanced Tips: continuous2 & digits

```{r}
#| output-location: "column"
#| echo: true
tbl_summary(
  sm_trial,
  by = trt,
  type = age ~ "continuous2",
  statistic = 
    list(
      age ~ c("{mean} ({sd})", 
              "{min}, {max}"), 
      response ~ "{n} / {N} ({p}%)"
    ),
  label = 
    grade ~ "Pathologic tumor grade",
  digits = age ~ 1
)
```

::: small
::: columns
::: {.column width="50%"}

-   `type`: specifies the summary type as `continuous2`

-   `digits`: specify the number of decimal places for rounding
:::

::: {.column width="50%"}
:::
:::
:::

## Advanced Tips: tbl_continuous()

Summarize a continuous variable within categories and across different strata.

```{r}
#| output-location: "column"
#| code-line-numbers: "3"
#| echo: true
tbl_continuous(
  data = trial,
  variable = age,
  by = trt,
  include = c(grade, response)
)

```

## Advanced Tips: Custom p-value functions

- Many tests available by default: https://www.danieldsjoberg.com/gtsummary/reference/tests.html
- If you need one not on the list, create a custom function (use broom tidy at the end)

```{r}
#| output-location: "column"
#| echo: true

# define function (need to use these arguments)
calculate_prop_test <- function(data, variable, by, ...) {
  data <- tidyr::drop_na(data, dplyr::all_of(c(variable, by)))
  prop.trend.test(
    x = table(data[[variable]], data[[by]])[2, ], # get the second row (the positive row)
    n = table(data[[by]])) |> 
    broom::tidy()
}

trial[c("grade", "trt")] %>%
  tbl_summary(by = trt) %>%
  add_p(test = grade ~ "calculate_prop_test")

```

## Advanced Tips: tbl_uvregression() with formula

-   `formula` argument is powerful! You can adjust for variables, or pass mixed model formats (e.g. `"{y} ~ {x} + (1 | gear)"`)

-  Additionally, `add_global_p()` can be useful


```{r}
#| echo: true
#| output-location: "column"

tbl_uvreg <- sm_trial %>% 
  tbl_uvregression(
    method = glm,
    y = response,
    method.args = list(family = binomial),
    formula = "{y} ~ {x} + age",
    include = -c(age), 
    exponentiate = TRUE
  ) %>%
  bold_labels() %>%
  add_global_p()

tbl_uvreg
```




## Advanced Tip: tbl_merge()

Often it's useful to put summary stats and model estimates side by side 
```{r}
#| echo: true
#| output-location: "column"
#| code-line-numbers: "13, 14"
t3 <- trial[c("age", "grade", "response")] %>%
  tbl_summary(missing = "no") %>%
  add_n() %>%
  modify_header(stat_0 ~ "**Summary Statistics**")

t4 <- tbl_uvregression(
    trial[c("ttdeath", "death", "age", "grade", "response")],
    method = coxph,
    y = Surv(ttdeath, death),
    exponentiate = TRUE,
    hide_n = TRUE)

tbl_merge(tbls = list(t3, t4)) %>%
  modify_spanning_header(everything() ~ NA_character_)

```

## Advanced Tip: gtsummary Themes 

-  Themes control many aspects of how a table is printed. Function defaults can be controlled with themes, as well as other aspects that are not modifiable with function arguments.

- The {gtsummary} package comes with a few themes, and we welcome user-contributed themes as well!

- Most commonly used theme: `gtsummary::theme_gtsummary_compact()`

- More info: [https://www.danieldsjoberg.com/gtsummary/articles/themes.html](https://www.danieldsjoberg.com/gtsummary/articles/themes.html)




## Other Useful Functions

[tbl_listing()]{.emphasized}


Problem: You <3  {gtsummary} themes, but you have a non-{gtsummary} table included your analysis report and it doesnâ€™t match your beautiful {gtsummary} tables.
 
Solution: tbl_listing() from the {gtreg} package turns any table into a {gtsummary} class table. Now {gtsummary} themes can be applied to any table in your report.

![](images/tbl_listing.png)

## Other Useful Functions

[gtreg::tbl_listing()]{.emphasized}

![](images/tbl_listing2.png)

## Other Customizations

Many more customization available!

<br>

See the documentation at <http://www.danieldsjoberg.com/gtsummary/reference/index.html>

And a detailed `tbl_summary()` vignette at <http://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html>





## Report Reproducbile Statistics with gtsummary::inline_text()

-   Tables are important, but we often need to report results in-line in a report.

-   Any statistic reported in a {gtsummary} table can be extracted and reported in-line in an R Markdown document with the `inline_text()` function.

-   The pattern of what is reported can be modified with the `pattern =` argument.

-   Default is `pattern = "{estimate} ({conf.level*100}% CI {conf.low}, {conf.high}; {p.value})"`



## Report Reproducbile Statistics with gtsummary::inline_text()


```{r }
#| echo: true
#| cache: false
#| output-location: "column"

library(gtsummary)

tbl_uvreg <- sm_trial %>% 
  tbl_uvregression(
    method = glm,
    y = response,
    method.args = list(family = binomial),
    exponentiate = TRUE
  ) %>%
  bold_labels()

tbl_uvreg

```

**In Code:** The odds ratio for age is '`inline_text(tbl_uvreg, variable = age)`'

**In Report:** The odds ratio for age is `r inline_text(tbl_uvreg, variable = age)`

