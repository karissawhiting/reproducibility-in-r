---
format: 
  revealjs: 
    theme:  [default, style.scss]
    transition: fade
    slide-number: true
execute:
  echo: true 
  output: asis
  error: true
editor: source
--- 

# Reproducibility Analyses in R {background-color="#007CBA" style="text-align: center;"}

```{r}
#| echo: false
#| results: false

knitr::opts_chunk$set(echo = TRUE, results = 'asis')

library(tidyverse)
library(gtsummary)

sm_trial <-
  trial %>% 
  select(trt, age, grade, response)


knit_print.gtsummary <- function(x, ...) {
   gtsummary::as_gt(x) |>
     gt::as_raw_html()
}

knit_print.gt_tbl <- function(x, ...) {
  gt::as_raw_html(x)
} 


registerS3method("knit_print", "gtsummary", knit_print.gtsummary)
registerS3method("knit_print", "gt_tbl", knit_print.gt_tbl)

# fill for font awesome icons
fa_fill <- "#606060"
```


Karissa Whiting <br> Research Biostatistician <br> Memorial Sloan Kettering <br>

June 10th, 2024


<p align="center"><img src="images/core_hex_stickers.png"width=20%></p>


<br>

`r fontawesome::fa("twitter", fill = "white")` [[\@karissawhiting](https://twitter.com/karissawhiting)]{style="color: white"}

`r fontawesome::fa("github", fill = "white")` [[github.com/karissawhiting](https://github.com/karissawhiting/)]{style="color: white"}


## What is Reproducibility?

::: incremental

A data analysis is [reproducible]{.emphasized} if all the information (data, files, etc.) needed to compute results is available for someone else to re-do your entire analysis and get the same results. 

- All data processing steps from `raw data` to `cleaned data` are available and documented

- All analysis decisions made are documented and available in code

- Results don't depend on your specific computational environment (e.g. no hard coded file paths, seeds set for stochastic computations)

:::

## Why is Reproducibility Important?

::: incremental

- Allows you to show evidence of your results

- Encourages transparency about decisions made during analysis

- Enables others to check and use/extend your methods and results

- Enables FUTURE YOU to check and use/extend your methods and results




***"You mostly collaborate with yourself, and me-from-two-months-ago never responds to email"***

~ *Dr. Mark Holder, Computational Biologist*

:::

## Why is Reproducibility Important?


Dangers of writing code that is hard to double-check or confirm:

- [The New York Times](https://www.nytimes.com/2011/07/08/health/research/08genes.html?_r=0)

<p align="center"><img src="images/nytimes.png"width=50%></p>
<p align="center"><img src="images/nytimes2.png"width=60%></p>



## How Do We Ensure Our Code is Reproducible?

::: incremental

- Have a clear project structure and defined workflow - **Discussed in Part 1**

- Avoid absolute file paths (e.g. `~/Users/Whiting/Projects...`) - **Discussed in Part 1**

- Version control (document changes you make, or use git!) - **Discussed in Part 1**

- Comment and document your code

- [Avoid 'by hand' steps used in the analysis]{.emphasized}

:::

## How Do We Ensure Our Code is Reproducible?

[Avoid 'by hand' steps used in the analysis]{.emphasized}

- All analysis steps should be done using code and saved in well-documented scripts (e.g. you should use a script to clean data, rather than cleaning it by hand in Excel)
    
- If any 'non-scriptable' steps are unavoidable, document those steps very clearly

- Use [reproducible reporting]{.emphasized} practices for analyses (e.g. Rmd, quarto, Jupyter notebook, inline text stats)

# Reproducible Reporting {background-color="#007CBA" style="text-align: center;"}

## Reproducible Reporting

::: incremental

- [R Markdown]{.emphasized} & [Quarto]{.emphasized} are tools for integrating R code and narrative text into a single executable document

- Can be rendered into various **output formats** (HTML, PDF, Word, and slides)

- Detailed code and data analysis steps are included in one document, encouraging **transparency** and providing a complete record of the research process 

- Documents automatically update when data or code changes, **reducing errors** and **maintaining consistency**.

- Version-control compatible 
:::

## Quick Aside: R Markdown vs. Quarto?

- **RStudio is Now Posit**, aiming to broaden their scope to include software for other programming languages (e.g Python, Julia)

-   New publishing system called Quarto (already launched) is part of this multilanguage effort

![](images/rstudio-posit.png)

## What is Quarto?

::: incremental
-   [Quarto]{.emphasized} is a multi-language, next generation version of R Markdown from RStudio

-   [This change shouldn't affect R users much]{.emphasized} - it can render most existing Rmd files with few changes

-  Do I Have to Switch From R Markdown? [Nope!]{.emphasized} R Markdown is not going away and will continue to be supported

- However, Quarto has some exciting features (some shown today) and will continue to develop and mature.

![](images/rmd-quarto.png){fig-align="center"}


:::


## Moving From R Markdown

::: incremental

Quarto documents end in `.qmd` instead of `.rmd` and have some minimal required formatting changes:

<br>

\-[YAML Header]{.emphasized} now uses `format` instead of `output` and allows auto-complete to make editing the YAML more fool-proof.

\-[Global chunk options]{.emphasized} are set in YAML header using `execute` instead of in a knitr setup chunk.

\-[Individual chunk options]{.emphasized} are also set in YAML in each chunk as needed, using the "hashpipe" (`#|`).
:::






## Moving From R Markdown: YAML Header

- [YAML Header]{.emphasized} now uses `format` instead of `output` and allows auto-complete to make editing the YAML more fool-proof.

## Moving From R Markdown: YAML Header

- [YAML Header]{.emphasized} now uses `format` instead of `output` and allows auto-complete to make editing the YAML more fool-proof.


:::: columns
::: column

**R Markdown:**

```{yaml}
#| echo: TRUE
#| code-line-numbers: "2"

title: "My Document"
output:
  html_document:
    toc: true
    number_sections: true
    css: styles.css
```
:::

::: column

**Quarto:**

```{yaml}
#| echo: TRUE
#| code-line-numbers: "2"

title: "My Document"
format:
  html:
    toc: true
    number-sections: true
    css: styles.css
```
:::

::::


## Moving From R Markdown: YAML Header 2


- [Global chunk options]{.emphasized} are set in YAML header using `execute` instead of in a knitr setup chunk.

## Moving From R Markdown: YAML Header 2


- [Global chunk options]{.emphasized} are set in YAML header using `execute` instead of in a knitr setup chunk.

::: columns
::: column
**R Markdown:**

```{r,setup,echo=TRUE}
knitr::opts_chunk$set(echo=FALSE)
```
:::

::: column
**Quarto:**

``` yaml
title: "My-Title"
subtitle: "Until now!"
execute:
  echo: false
```
:::
:::

## Moving From R Markdown: YAML Chunk Options


- [Individual chunk options]{.emphasized} are also set in YAML in each chunk as needed, using the "hashpipe" (`#|`).


## Moving From R Markdown: YAML Chunk Options


- [Individual chunk options]{.emphasized} are also set in YAML in each chunk as needed, using the "hashpipe" (`#|`).

::: columns
::: column

**R Markdown:**

```{{r}}
print("hi")
```

:::

::: column
**Quarto:**

```{r}
#| echo: fenced
#| include: True
#| results: false
print("hi")
```
:::
:::

## Quarto Features: Flexible Layouts With Multiple Columns

How to specify multiple column layout: 

![](images/multiple.columns.png)

## Quarto flexible layout using {layout}

![](images/quarto3.png)

::: notes
You can now easily organize your report using various layouts including column formats Here, we want the first image spans the entire first row and two equal sized figure in the second row

The layout attribute is a 2-dimensional array where the first dimension defines rows and the second columns. In this case "layout="\[\[1,1\], \[1\]\]" translates to: create two rows, the first of which has two columns of equal size and the second of which has a single column.
:::


## Quarto flexible layout using {layout}

![](images/Elephant.png)


## Quarto Features: Callouts and Comments

Sometimes you need to draw attention to something in your report. You can do this using `{.callout-note}`

```
::: {.callout-note}
Note that there are five types of callouts, including:
`note`, `warning`, `important`, `tip`, and `caution`.
:::
```

::: {.callout-note}
Note that there are five types of callouts, including:
`note`, `warning`, `important`, `tip`, and `caution`.
:::

```
::: {.callout-warning}
Here is an example of a warning
:::
```

::: {.callout-warning}
Here is an example of a warning 
:::




## Quarto Features: Tabs

::::{.columns}
:::{.column}
![](images/tab_code.png)
:::


:::{.column}
![](images/tab_image.png)
:::
::::


{{< include 01-gtsummary.qmd >}}

{{< include 02-bstfun.qmd >}}

{{< include 03-lubridate-and-bonus.qmd >}}

# Thank You!!!

[Questions?]{.large}

## Resources

- {biostaR} - <https://github.mskcc.org/pages/datadojo/biostatR/index.html>
- {gtsummary} - <https://www.danieldsjoberg.com/gtsummary/>
- {bstfun} - <https://www.danieldsjoberg.com/bstfun/index.html>
- Departmental Resource Guide - <https://rconnect.mskcc.org/resource-guide/>
- Quarto Docs - <https://quarto.org/docs/guide/>
- Quarto Blog Post by Alison Hill - <https://www.apreshill.com/blog/2022-04-we-dont-talk-about-quarto/>

